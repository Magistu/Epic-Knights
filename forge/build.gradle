plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.minecraftforge.net/' }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

//if(project.hasProperty('release_type')) {
//    tasks.register("publishMod") {
//        dependsOn(build)
//        finalizedBy(tasks.curseforge)
//        finalizedBy(tasks.modrinth)
//    }
//
//    curseforge {
//        apiKey = System.getenv("CURSEFORGE_API_KEY")
//        project {
//            id = '509041'
//            changelog = changelog_last_section()
//            changelogType = 'markdown'
//            releaseType = release_type
//            addGameVersion "1.19.2"
//            addGameVersion "Forge"
//
//            relations {
//                requiredDependency 'cloth-config'
//                requiredDependency 'architectury-api'
//            }
//
//            mainArtifact(remapJar)
//            afterEvaluate {
//                uploadTask.dependsOn(remapJar)
//            }
//            options {
//                forgeGradleIntegration = false
//            }
//        }
//    }
//
//    modrinth {
//        token = System.getenv("MODRINTH_API_KEY")
//        projectId = "epic-knights-shields-armor-and-weapons" // This can be the project ID or the slug. Either will work!
//        versionName = "${project.version}"
//        versionNumber = "${project.version}-forge" // You don't need to set this manually. Will fail if Modrinth has this version already
//        versionType = release_type // This is the default -- can also be `beta` or `alpha`
//        uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
//        gameVersions = ["1.19.2"] // Must be an array, even with only one version
//        loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
//        dependencies { // A special DSL for creating dependencies
//            // scope.type
//            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
//            // The type can either be `project` or `version`
//            required.project 'cloth-config'
//            required.project 'architectury-api'
//        }
//    }
//}
